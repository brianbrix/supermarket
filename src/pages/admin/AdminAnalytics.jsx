import { useEffect, useMemo, useState } from 'react';
import '../../App.admin.css';
import { api } from '../../services/api.js';
import InfoTooltip from '../../components/InfoTooltip.jsx';
import { useCurrencyFormatter, useSettings } from '../../context/SettingsContext.jsx';

const RANGE_PRESETS = [
  { label: '7d', days: 7 },
  { label: '30d', days: 30 },
  { label: '90d', days: 90 },
];

const STATUS_COLORS = {
  PENDING: 'bg-secondary',
  PROCESSING: 'bg-primary',
  SHIPPED: 'bg-info',
  DELIVERED: 'bg-success',
  COMPLETED: 'bg-success',
  CANCELLED: 'bg-warning',
  REFUNDED: 'bg-danger',
  FAILED: 'bg-danger',
};

const METRIC_TIPS = {
  totalRevenue: 'Gross revenue generated by non-cancelled orders in the selected window.',
  orderCount: 'Total number of orders created within the selected window.',
  completedOrderCount: 'Orders currently in-progress or completed (excludes cancelled, failed, and refunded).',
  averageOrderValue: 'Average gross revenue per completed order in the selected window.',
  uniqueCustomers: 'Unique customers placing orders during the window (by user account or phone number).',
};

export default function AdminAnalytics() {
  const [rangePreset, setRangePreset] = useState(RANGE_PRESETS[1].days);
  const [summary, setSummary] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const formatCurrency = useCurrencyFormatter();
  const { settings } = useSettings();
  const currencyLabel = settings?.currency?.symbol || settings?.currency?.code || 'KES';

  const formatAmount = useMemo(
    () => (value) => formatCurrency(Number(value ?? 0)),
    [formatCurrency]
  );

  useEffect(() => {
    let cancelled = false;
    setLoading(true);
    setError(null);

    api.admin.analytics.overview({ rangeDays: rangePreset })
      .then((data) => {
        if (!cancelled) {
          setSummary(data);
        }
      })
      .catch((err) => {
        if (!cancelled) {
          setError(err?.message || 'Failed to load analytics data.');
        }
      })
      .finally(() => {
        if (!cancelled) {
          setLoading(false);
        }
      });

    return () => {
      cancelled = true;
    };
  }, [rangePreset]);

  const metrics = summary?.metrics;
  const trend = summary?.trend ?? [];
  const statusBreakdown = summary?.statusBreakdown ?? [];
  const topProducts = summary?.topProducts ?? [];
  const range = summary?.range;
  const revenueChange = metrics?.revenueChangePct;

  const bestDayDisplay = useMemo(() => {
    if (!metrics?.bestDay) return null;
    const date = new Date(metrics.bestDay);
    if (Number.isNaN(date.getTime())) return metrics.bestDay;
    return new Intl.DateTimeFormat(undefined, { month: 'short', day: 'numeric', year: 'numeric' }).format(date);
  }, [metrics?.bestDay]);

  const isRefreshing = loading && Boolean(summary);

  return (
    <div className="container py-4">
      <div className="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-2 mb-4">
        <div>
          <h1 className="h4 m-0">Analytics Summary</h1>
          {range && (
            <p className="text-muted small mb-0">
              Range: {range.from.slice(0, 10)} → {range.to.slice(0, 10)} · {range.days} day{range.days === 1 ? '' : 's'}
            </p>
          )}
        </div>
        <a href="/admin/dashboard" className="btn btn-outline-secondary btn-sm">Back to Dashboard</a>
      </div>

      <div className="d-flex flex-wrap gap-2 mb-4" role="group" aria-label="Analytics range presets">
        {RANGE_PRESETS.map((preset) => (
          <button
            key={preset.days}
            type="button"
            className={`btn btn-sm ${rangePreset === preset.days ? 'btn-primary' : 'btn-outline-primary'}`}
            onClick={() => setRangePreset(preset.days)}
            disabled={rangePreset === preset.days}
          >
            {preset.label}
          </button>
        ))}
      </div>

      {error && <div className="alert alert-danger">{error}</div>}
      {loading && !summary && <p className="text-muted">Loading analytics…</p>}
      {isRefreshing && <p className="text-muted small fst-italic">Refreshing…</p>}

      {summary && (
        <>
          <section className="mb-4">
            <div className="row row-cols-1 row-cols-sm-2 row-cols-lg-4 g-3">
              <MetricCard
                title="Total Revenue"
                value={formatAmount(metrics?.totalRevenue ?? 0)}
                tooltip={METRIC_TIPS.totalRevenue}
                accent="success"
              />
              <MetricCard
                title="Orders"
                value={metrics?.orderCount ?? 0}
                tooltip={METRIC_TIPS.orderCount}
              />
              <MetricCard
                title="Completed / In Progress"
                value={metrics?.completedOrderCount ?? 0}
                tooltip={METRIC_TIPS.completedOrderCount}
              />
              <MetricCard
                title="Avg Order Value"
                value={formatAmount(metrics?.averageOrderValue ?? 0)}
                tooltip={METRIC_TIPS.averageOrderValue}
              />
              <MetricCard
                title="Unique Customers"
                value={metrics?.uniqueCustomers ?? 0}
                tooltip={METRIC_TIPS.uniqueCustomers}
              />
              <MetricCard
                title="Best Day"
                value={bestDayDisplay ?? '—'}
                tooltip="Date with the highest gross revenue in the selected window."
                secondary={metrics?.bestDayRevenue != null ? formatAmount(metrics.bestDayRevenue) : null}
              />
              <MetricCard
                title="Revenue Change"
                value={
                  revenueChange != null
                    ? `${revenueChange >= 0 ? '+' : ''}${revenueChange.toFixed(2)}%`
                    : '—'
                }
                tooltip="Comparison of total revenue against the previous window of the same length."
                accent={revenueChange != null ? (revenueChange >= 0 ? 'success' : 'danger') : undefined}
              />
            </div>
          </section>

          <section className="mb-5">
            <div className="d-flex align-items-center justify-content-between gap-2 mb-2">
              <h2 className="h6 m-0 d-flex align-items-center gap-2">
                Revenue Trend
                <InfoTooltip text="Daily gross revenue for orders in progress or completed during the selected window." />
              </h2>
              <span className="badge text-bg-light">{trend.length} data point{trend.length === 1 ? '' : 's'}</span>
            </div>
            <RevenueTrendChart data={trend} formatAmount={formatAmount} currencyLabel={currencyLabel} />
          </section>

          <section className="mb-5">
            <div className="d-flex align-items-center justify-content-between gap-2 mb-3">
              <h2 className="h6 m-0 d-flex align-items-center gap-2">
                Orders by Status
                <InfoTooltip text="Snapshot of order statuses generated during the selected window." />
              </h2>
            </div>
            <StatusBreakdownChart data={statusBreakdown} />
          </section>

          <section>
            <div className="d-flex align-items-center justify-content-between gap-2 mb-3">
              <h2 className="h6 m-0 d-flex align-items-center gap-2">
                Top Products
                <InfoTooltip text="Products with the highest quantity sold in the selected window." />
              </h2>
              <span className="badge text-bg-light">{topProducts.length} item{topProducts.length === 1 ? '' : 's'}</span>
            </div>
            <TopProductsTable products={topProducts} formatAmount={formatAmount} />
          </section>
        </>
      )}
    </div>
  );
}

function MetricCard({ title, value, tooltip, accent, secondary }) {
  const accentClass = accent ? `admin-metric-accent-${accent}` : '';
  return (
    <div className="col">
      <div className={`admin-metric-card card h-100 shadow-sm ${accentClass}`}>
        <div className="card-body py-3">
          <div className="d-flex justify-content-between align-items-start mb-1">
            <span className="text-muted small">{title}</span>
            {tooltip && <InfoTooltip text={tooltip} />}
          </div>
          <div className="fw-semibold fs-5">{value}</div>
          {secondary && <div className="text-muted small mt-1">{secondary}</div>}
        </div>
      </div>
    </div>
  );
}

function RevenueTrendChart({ data, formatAmount, currencyLabel }) {
  if (!data.length) {
    return <p className="text-muted small mb-0">No revenue recorded during this window.</p>;
  }

  const maxRevenue = Math.max(...data.map((point) => Number(point.revenue) || 0), 1);

  return (
    <div className="border rounded p-3 bg-body-tertiary">
      <div className="d-flex align-items-end gap-2" style={{ minHeight: '200px' }}>
        {data.map((point) => {
          const revenue = Number(point.revenue) || 0;
          const height = (revenue / maxRevenue) * 160 + (revenue > 0 ? 20 : 0);
          const label = point.date.slice(5);
          const orders = Number(point.orders) || 0;
          return (
            <div key={point.date} className="d-flex flex-column align-items-center flex-grow-1" style={{ minWidth: '34px' }}>
              <div
                className="w-100 rounded-top bg-primary position-relative"
                style={{ height: `${height}px`, transition: 'height .3s ease' }}
                title={`${point.date}: ${formatAmount(revenue)} • Orders: ${orders}`}
                aria-label={`Revenue on ${point.date}: ${formatAmount(revenue)} from ${orders} order${orders === 1 ? '' : 's'}`}
              />
              <small className="text-muted mt-1" style={{ fontSize: '0.65rem' }}>{label}</small>
            </div>
          );
        })}
      </div>
      <p className="text-muted small mt-3 mb-0">
        Values shown in {currencyLabel}. Hover a bar to see the exact revenue and order count for that day.
      </p>
    </div>
  );
}

function StatusBreakdownChart({ data }) {
  if (!data.length) {
    return <p className="text-muted small mb-0">No orders were created during this window.</p>;
  }

  const visible = data.filter((item) => Number(item.count) > 0);
  if (!visible.length) {
    return <p className="text-muted small mb-0">No orders were created during this window.</p>;
  }

  const maxCount = Math.max(...visible.map((item) => Number(item.count) || 0), 1);

  return (
    <div className="vstack gap-2">
      {visible.map((item) => {
        const count = Number(item.count) || 0;
        const width = (count / maxCount) * 100;
        const badgeClass = STATUS_COLORS[item.status] ?? 'bg-secondary';
        return (
          <div key={item.status} className="d-flex align-items-center gap-2">
            <span className={`badge ${badgeClass} text-uppercase`} style={{ width: '120px' }}>{item.status}</span>
            <div className="flex-grow-1 bg-body-tertiary rounded position-relative" style={{ height: '18px' }}>
              <div className={`${badgeClass} h-100 rounded`} style={{ width: `${width}%`, transition: 'width .4s' }} />
              <div className="position-absolute top-0 start-50 translate-middle-x small text-dark" style={{ lineHeight: '18px' }}>
                {count}
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
}

function TopProductsTable({ products, formatAmount }) {
  if (!products.length) {
    return <p className="text-muted small mb-0">No products have been sold in this window.</p>;
  }

  return (
    <div className="table-responsive small">
      <table className="table table-sm align-middle mb-0">
        <thead>
          <tr>
            <th style={{ width: '50%' }}>Product</th>
            <th className="text-end">Quantity</th>
            <th className="text-end">Gross</th>
          </tr>
        </thead>
        <tbody>
          {products.map((product) => (
            <tr key={product.id ?? product.name}>
              <td>{product.name}</td>
              <td className="text-end">{product.quantity}</td>
              <td className="text-end">{formatAmount(product.gross)}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
